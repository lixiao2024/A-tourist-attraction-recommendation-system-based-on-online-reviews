{"version":3,"sources":["uni-app:///main.js",null,"webpack:///I:/基于在线评论的旅游景点智能推荐系统/前端/pages/footprint/footprint.vue?5e94","webpack:///I:/基于在线评论的旅游景点智能推荐系统/前端/pages/footprint/footprint.vue?fbfb","webpack:///I:/基于在线评论的旅游景点智能推荐系统/前端/pages/footprint/footprint.vue?3b8f","uni-app:///pages/footprint/footprint.vue","webpack:///I:/基于在线评论的旅游景点智能推荐系统/前端/pages/footprint/footprint.vue?b07b","webpack:///I:/基于在线评论的旅游景点智能推荐系统/前端/pages/footprint/footprint.vue?49ff"],"names":["wx","__webpack_require_UNI_MP_PLUGIN__","__webpack_require__","createPage","Page","data","mapType","chinaMap","worldMap","visitedCities","name","value","footprintData","cities","visitCount","firstVisit","cityCoordinates","stats","totalCities","visitedCount","chinaRate","worldRate","onLoad","console","onReady","methods","loadMapData","uni","title","chinaJson","url","method","chinaRes","echarts","worldJson","worldRes","setTimeout","icon","initChinaMap","query","fields","node","size","exec","canvas","width","height","devicePixelRatio","text","left","textStyle","color","fontSize","tooltip","trigger","formatter","visualMap","type","pieces","min","max","bottom","show","series","map","roam","scaleLimit","label","itemStyle","areaColor","borderColor","borderWidth","emphasis","coordinateSystem","symbolSize","symbol","showEffectOn","rippleEffect","brushType","position","scale","zlevel","initWorldMap","backgroundColor","geo","shadowBlur","shadowColor","switchMap","getVisitedCityData","getCityCoordinates","getUserLocation","success","content","editable","placeholderText","fail","_getUserLocation_old","cityName","addVisitedCity","saveFootprintData","refreshMaps","updateVisitedCities","updateStats"],"mappings":";;;;;;;;;;;;;AAAA;AAE2D;AAC3D;AACA;AAHA;AACAA,EAAE,CAACC,iCAAiC,GAAGC,mBAAmB;AAG1DC,UAAU,CAACC,kBAAI,CAAC,C;;;;;;;;;;;;;ACLhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsH;AACtH;AAC6D;AACL;AACc;;;AAGtE;AACmK;AACnK,gBAAgB,6KAAU;AAC1B,EAAE,+EAAM;AACR,EAAE,oFAAM;AACR,EAAE,6FAAe;AACjB;AACA;AACA;AACA;AACA;AACA,EAAE,wFAAU;AACZ;AACA;;AAEA;AACe,gF;;;;;;;;;;;;ACvBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,aAAa,sTAEN;AACP,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAsmB,CAAgB,mnBAAG,EAAC,C;;;;;;;;;;;;;;;;;;;;;;ACsD1nB;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;AAGA;AACA;AACA;AAAA,eAEA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC,gBACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA;MACA;MAAA,CACA;;MACA;MACAC;QACAC;UACA;YAAAC;YAAAC;UAAA;UACA;YAAAD;YAAAC;UAAA;UACA;YAAAD;YAAAC;UAAA;QACA;MACA;MACA;MACAC;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EAEA;EACAC;IACA;IACA;IACA;MACA;QACA;QACA;QACA;MACA;QACAC;MACA;IACA;EACA;EAEA;EACAC;IACA;EACA;EAEAC;IACA;IACAC;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEAC;kBACAC;gBACA;;gBAEA;gBAAA,IACAC;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACAF;kBACAG;kBACAC;gBACA;cAAA;gBAHAC;gBAAA,MAKAA;kBAAA;kBAAA;gBAAA;gBACAH;gBACA;gBACAI;gBACAV;gBAAA;gBAAA;cAAA;gBAAA,MAEA;cAAA;gBAAA,IAKAW;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA,OACAP;kBACAG;kBACAC;gBACA;cAAA;gBAHAI;gBAAA,MAKAA;kBAAA;kBAAA;gBAAA;gBACAD;gBACA;gBACAD;gBACAV;gBAAA;gBAAA;cAAA;gBAAA,MAEA;cAAA;gBAIAI;;gBAEA;gBACAS;kBACA;kBACA;kBACA;kBACA;gBACA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAEAT;gBACAJ;gBACAI;kBACAC;kBACAS;gBACA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEA;IAEAC;MAAA;MACA;MACAC,0BACAC;QAAAC;QAAAC;MAAA,GACAC;QACA;UACA;UACA;UAEAC;UACAA;UAEA;YACAC;YACAC;YACAC;UACA;UAEA;YACAnB;cACAoB;cACAC;cACAC;gBACAC;gBACAC;cACA;YACA;YACAC;cACAC;cACAC;gBACA;kBACA;gBACA;cACA;YACA;YACAC;cACAC;cACAC,SACA;gBAAAC;gBAAAR;cAAA;cAAA;cACA;gBAAAS;gBAAAT;cAAA;cAAA,CACA;;cACAF;cACAY;cACAC;YACA;YACAC,SACA;cACArD;cACA+C;cACAO;cACAC;cACAC;gBACAP;gBACAC;cACA;cACAO;gBACAL;gBACAV;gBACAD;cACA;cACAiB;gBACAC;gBACAC;gBACAC;cACA;cACAC;gBACAL;kBACAL;kBACAV;kBACAD;gBACA;gBACAiB;kBACAC;gBACA;cACA;cACAhE;YACA,GACA;cACAoD;cACAgB;cACApE;cACAqE;cACAC;cACAC;cACAC;gBACAC;cACA;cACAX;gBACAL;gBACAiB;gBACAxB;cACA;cACAa;gBACAjB;cACA;cACAqB;gBACAQ;cACA;cACAC;YACA;UAEA;UAEA;QACA;MACA;IACA;IAEAC;MAAA;MACA;MACA3C,0BACAC;QAAAC;QAAAC;MAAA,GACAC;QACA;UACA;UACA;UAEAC;UACAA;UAEA;YACAC;YACAC;YACAC;UACA;UAEA;YACAoC;YACA9B;cACAC;cACAC;YACA;YACA6B;cACApB;cACAC;cACAC;gBACAP;gBACAC;cACA;cACAQ;gBACAC;gBACAC;gBACAC;cACA;cACAC;gBACAJ;kBACAC;gBACA;cACA;YACA;YACAN,SACA;cACAN;cACAgB;cACApE;cACAqE;cACAC;cACAC;cACAC;gBACAC;cACA;cACAX;gBACAL;gBACAiB;gBACAxB;gBACAJ;cACA;cACAiB;gBACAjB;gBACAkC;gBACAC;cACA;cACAd;gBACAQ;cACA;cACAC;YACA;UAEA;UAEA;QACA;MACA;IACA;IAEA;IACAM;MAAA;MACA;MACAnD;QACA;UACA;QACA;UACA;QACA;MACA;IACA;IAEA;IACAoD;MAAA;MACA;;MAEA;MACA;QACA;QACA,QACA;UAAA9E;UAAAC;UAAAG;QAAA,EACA;MACA;;MAEA;MACA;IACA;IAEA;IACA2E;MACA;MACA;MACA;QACA;QACA;QACA;QACA;MACA;IACA;IAEA;IACAC;MAAA;MACA;MACA/D;QACA8B;QACAkC;UACA;UACAhE;YACAC;YACAgE;YACAC;YACAC;YACAH;cACA;gBACA;gBACA;gBACA;gBACAhE;kBACAC;kBACAS;gBACA;cACA;YACA;UACA;QACA;QACA0D;UACAxE;UACA;UACAI;YACAC;YACAgE;YACAC;YACAC;YACAH;cACA;gBACA;gBACA;gBACAhE;kBACAC;kBACAS;gBACA;cACA;YACA;UACA;QACA;MACA;IACA;IAEA;IACA2D;MAAA;MACA;MACArE;QACAgE;UACA;YACA;YACA;YACA;YACA;;YAEA;YACA;cACA;cACAM;YACA;cACA;cACAA;YACA;;YAEA;YACA;YACAtE;cACAC;cACAS;YACA;UACA;YACAV;cACAC;cACAS;YACA;UACA;QACA;QACA0D;UACAxE;UACAI;YACAC;YACAS;UACA;QACA;MACA;IACA;IAEA;IAEA;IACA6D;MACA;;MAEA;MACA;;MAEA;MACA;QACA;QACA;MACA;QACA;QACA;UACApF;UACAC;QACA;;QAEA;QACA;UACAL;UACAC;QACA;MACA;;MAEA;MACA;MACA;IACA;IAEA;IACAwF;MACA;QACA;QACAxE;MACA;QACAJ;MACA;IACA;IAEA;IACA6E;MACA;QACA;UACArC;YACA1D;UACA;YACAA;UACA;QACA;MACA;MAEA;QACA;UACA0D;YACA1D;UACA;QACA;MACA;IACA;IAEA;IACAgG;MACA;;MAEA;MACA;QACA;QACA;UACA3F;UACAC;QACA;MACA;;MAEA;MACA;IACA;IAEA;IACA2F;MACA;MACA;;MAEA;MACA;;MAEA;MACA;;MAEA;MACA;MACA;;MAEA;MACA;QACApF;QACAC;QACAC;QACAC;MACA;IACA;EACA;AACA;AAAA,2B;;;;;;;;;;;;;ACjlBA;AAAA;AAAA;AAAA;AAAipC,CAAgB,kmCAAG,EAAC,C;;;;;;;;;;;ACArqC;AACA,OAAO,KAAU,EAAE,kBAKd","file":"pages/footprint/footprint.js","sourcesContent":["import 'uni-pages';\n// @ts-ignore\nwx.__webpack_require_UNI_MP_PLUGIN__ = __webpack_require__;import '@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js';\nimport Vue from 'vue'\nimport Page from './pages/footprint/footprint.vue'\ncreatePage(Page)","import { render, staticRenderFns, recyclableRender, components } from \"./footprint.vue?vue&type=template&id=60cb6cf4&\"\nvar renderjs\nimport script from \"./footprint.vue?vue&type=script&lang=js&\"\nexport * from \"./footprint.vue?vue&type=script&lang=js&\"\nimport style0 from \"./footprint.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"pages/footprint/footprint.vue\"\nexport default component.exports","export * from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--17-0!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/template.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./footprint.vue?vue&type=template&id=60cb6cf4&\"","var components\ntry {\n  components = {\n    uniIcons: function () {\n      return import(\n        /* webpackChunkName: \"uni_modules/uni-icons/components/uni-icons/uni-icons\" */ \"@/uni_modules/uni-icons/components/uni-icons/uni-icons.vue\"\n      )\n    },\n  }\n} catch (e) {\n  if (\n    e.message.indexOf(\"Cannot find module\") !== -1 &&\n    e.message.indexOf(\".vue\") !== -1\n  ) {\n    console.error(e.message)\n    console.error(\"1. 排查组件名称拼写是否正确\")\n    console.error(\n      \"2. 排查组件是否符合 easycom 规范，文档：https://uniapp.dcloud.net.cn/collocation/pages?id=easycom\"\n    )\n    console.error(\n      \"3. 若组件不符合 easycom 规范，需手动引入，并在 components 中注册该组件\"\n    )\n  } else {\n    throw e\n  }\n}\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n}\nvar recyclableRender = false\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns, recyclableRender, components }","import mod from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./footprint.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib/index.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--13-1!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/script.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./footprint.vue?vue&type=script&lang=js&\"","<template>\n  <view class=\"footprint-container\">\n    <!-- 地图切换按钮 -->\n    <view class=\"map-switch\">\n      <button \n        class=\"switch-btn\" \n        :class=\"{ active: mapType === 'china' }\" \n        @click=\"switchMap('china')\"\n      >中国地图</button>\n      <button \n        class=\"switch-btn\" \n        :class=\"{ active: mapType === 'world' }\" \n        @click=\"switchMap('world')\"\n      >世界地图</button>\n    </view>\n\n    <!-- 统计信息面板 -->\n    <view class=\"stats-panel\">\n      <view class=\"stats-item\">\n        <text class=\"stats-label\">已探索城市</text>\n        <text class=\"stats-value\">{{stats.visitedCount}}</text>\n      </view>\n      <view class=\"stats-item\">\n        <text class=\"stats-label\">{{mapType === 'china' ? '中国' : '世界'}}覆盖率</text>\n        <text class=\"stats-value\">{{mapType === 'china' ? stats.chinaRate : stats.worldRate}}</text>\n      </view>\n    </view>\n\n    <!-- 地图容器 -->\n    <view class=\"map-container\">\n      <canvas \n        type=\"2d\"\n        id=\"chinaMap\"\n        class=\"map-canvas\" \n        :style=\"{ display: mapType === 'china' ? 'block' : 'none' }\"\n      ></canvas>\n      <canvas \n        type=\"2d\"\n        id=\"worldMap\"\n        class=\"map-canvas\" \n        :style=\"{ display: mapType === 'world' ? 'block' : 'none' }\"\n      ></canvas>\n    </view>\n    \n    <!-- 添加当前位置按钮 -->\n    <view class=\"add-location-btn\" @click=\"getUserLocation\">\n      <uni-icons type=\"location\" size=\"20\" color=\"#fff\"></uni-icons>\n      <text>添加当前位置</text>\n    </view>\n  </view>\n</template>\n\n<script>\n// 修改 echarts 导入方式\nimport * as echarts from '@/js/echarts.js'\n\n// 地图数据\nlet chinaJson = null;\nlet worldJson = null;\n\nexport default {\n  data() {\n    return {\n      mapType: 'china',\n      chinaMap: null,\n      worldMap: null,\n      visitedCities: [\n        { name: '北京', value: 1 },\n        { name: '上海', value: 1 },\n        { name: '广州', value: 1 }\n        // 这里可以根据实际访问数据动态生成\n      ],\n      // 添加足迹数据对象\n      footprintData: {\n        cities: {\n          '北京': { visitCount: 1, firstVisit: '2023-01-01' },\n          '上海': { visitCount: 1, firstVisit: '2023-02-15' },\n          '广州': { visitCount: 1, firstVisit: '2023-03-20' }\n        }\n      },\n      // 城市坐标数据\n      cityCoordinates: {},\n      // 添加统计信息\n      stats: {\n        totalCities: 0,\n        visitedCount: 0,\n        chinaRate: '0%',\n        worldRate: '0%'\n      }\n    }\n  },\n  \n  // 页面加载完成后初始化地图\n  onLoad() {\n    // 从本地存储加载足迹数据\n    const savedData = uni.getStorageSync('footprint_data');\n    if (savedData) {\n      try {\n        this.footprintData = JSON.parse(savedData);\n        // 更新访问城市列表\n        this.updateVisitedCities();\n      } catch (e) {\n        console.error('解析足迹数据失败:', e);\n      }\n    }\n  },\n  \n  // 页面显示时初始化地图\n  onReady() {\n    this.loadMapData();\n  },\n  \n  methods: {\n    // 加载地图数据\n    async loadMapData() {\n      try {\n        uni.showLoading({\n          title: '加载地图数据...'\n        });\n        \n        // 加载中国地图数据\n        if (!chinaJson) {\n          const chinaRes = await uni.request({\n            url: '/static/map/china.json',\n            method: 'GET'\n          });\n          \n          if (chinaRes.statusCode === 200 && chinaRes.data) {\n            chinaJson = chinaRes.data;\n            // 注册地图数据\n            echarts.registerMap('china', chinaJson);\n            console.log('中国地图数据加载成功');\n          } else {\n            throw new Error('中国地图数据加载失败');\n          }\n        }\n        \n        // 加载世界地图数据\n        if (!worldJson) {\n          const worldRes = await uni.request({\n            url: '/static/map/world.json',\n            method: 'GET'\n          });\n          \n          if (worldRes.statusCode === 200 && worldRes.data) {\n            worldJson = worldRes.data;\n            // 注册地图数据\n            echarts.registerMap('world', worldJson);\n            console.log('世界地图数据加载成功');\n          } else {\n            throw new Error('世界地图数据加载失败');\n          }\n        }\n        \n        uni.hideLoading();\n        \n        // 初始化地图\n        setTimeout(() => {\n          this.initChinaMap();\n          this.initWorldMap();\n          // 更新统计信息\n          this.updateStats();\n        }, 300);\n      } catch (error) {\n        uni.hideLoading();\n        console.error('加载地图数据失败:', error);\n        uni.showToast({\n          title: '地图数据加载失败',\n          icon: 'none'\n        });\n      }\n    },\n\n    initChinaMap() {\n      const query = uni.createSelectorQuery().in(this)\n      query.select('#chinaMap')\n        .fields({ node: true, size: true })\n        .exec((res) => {\n          if (res[0]) {\n            const canvas = res[0].node\n            const ctx = canvas.getContext('2d')\n            \n            canvas.width = res[0].width * 2\n            canvas.height = res[0].height * 2\n            \n            this.chinaMap = echarts.init(canvas, null, {\n              width: res[0].width,\n              height: res[0].height,\n              devicePixelRatio: 2\n            })\n            \n            const option = {\n              title: {\n                text: '我的旅行足迹',\n                left: 'center',\n                textStyle: {\n                  color: '#333',\n                  fontSize: 16\n                }\n              },\n              tooltip: {\n                trigger: 'item',\n                formatter: function(params) {\n                  if (params.name) {\n                    return params.name + '<br/>到访次数：' + (params.value || 0);\n                  }\n                }\n              },\n              visualMap: {\n                type: 'piecewise',\n                pieces: [\n                  { min: 1, color: '#FFD700' },  // 已访问的城市显示金色\n                  { max: 0, color: '#C0C0C0' }   // 未访问的城市显示灰色\n                ],\n                left: 'left',\n                bottom: '10%',\n                show: true\n              },\n              series: [\n                {\n                  name: '足迹',\n                  type: 'map',\n                  map: 'china',\n                  roam: true,\n                  scaleLimit: {\n                    min: 1,\n                    max: 5\n                  },\n                  label: {\n                    show: true,\n                    fontSize: 8,\n                    color: '#333'\n                  },\n                  itemStyle: {\n                    areaColor: '#C0C0C0',\n                    borderColor: '#666',\n                    borderWidth: 0.5\n                  },\n                  emphasis: {\n                    label: {\n                      show: true,\n                      fontSize: 12,\n                      color: '#fff'\n                    },\n                    itemStyle: {\n                      areaColor: '#FFB800'\n                    }\n                  },\n                  data: this.visitedCities\n                },\n                {\n                  type: 'effectScatter',\n                  coordinateSystem: 'geo',\n                  data: this.visitedCities,\n                  symbolSize: 12,\n                  symbol: 'image://static/footprint.png',\n                  showEffectOn: 'render',\n                  rippleEffect: {\n                    brushType: 'stroke'\n                  },\n                  label: {\n                    show: true,\n                    position: 'right',\n                    formatter: '{b}'\n                  },\n                  itemStyle: {\n                    color: '#FFD700'\n                  },\n                  emphasis: {\n                    scale: true\n                  },\n                  zlevel: 1\n                }\n              ]\n            }\n            \n            this.chinaMap.setOption(option)\n          }\n        })\n    },\n\n    initWorldMap() {\n      const query = uni.createSelectorQuery().in(this)\n      query.select('#worldMap')\n        .fields({ node: true, size: true })\n        .exec((res) => {\n          if (res[0]) {\n            const canvas = res[0].node\n            const ctx = canvas.getContext('2d')\n            \n            canvas.width = res[0].width * 2\n            canvas.height = res[0].height * 2\n            \n            this.worldMap = echarts.init(canvas, null, {\n              width: res[0].width,\n              height: res[0].height,\n              devicePixelRatio: 2\n            })\n            \n            const option = {\n              backgroundColor: '#404a59',\n              tooltip: {\n                trigger: 'item',\n                formatter: '{b}<br/>到访次数：{c}'\n              },\n              geo: {\n                map: 'world',\n                roam: true,\n                scaleLimit: {\n                  min: 1,\n                  max: 10\n                },\n                itemStyle: {\n                  areaColor: '#323c48',\n                  borderColor: '#404a59',\n                  borderWidth: 1\n                },\n                emphasis: {\n                  itemStyle: {\n                    areaColor: '#2a333d'\n                  }\n                }\n              },\n              series: [\n                {\n                  type: 'effectScatter',\n                  coordinateSystem: 'geo',\n                  data: this.getVisitedCityData('world'),\n                  symbolSize: 15,\n                  symbol: 'image://static/footprint.png',\n                  showEffectOn: 'render',\n                  rippleEffect: {\n                    brushType: 'stroke'\n                  },\n                  label: {\n                    show: true,\n                    position: 'right',\n                    formatter: '{b}',\n                    color: '#fff'\n                  },\n                  itemStyle: {\n                    color: '#FFD700',\n                    shadowBlur: 10,\n                    shadowColor: '#333'\n                  },\n                  emphasis: {\n                    scale: true\n                  },\n                  zlevel: 1\n                }\n              ]\n            }\n            \n            this.worldMap.setOption(option)\n          }\n        })\n    },\n\n    // 切换地图\n    switchMap(type) {\n      this.mapType = type\n      setTimeout(() => {\n        if (type === 'china') {\n          this.chinaMap && this.chinaMap.resize()\n        } else {\n          this.worldMap && this.worldMap.resize()\n        }\n      }, 100)\n    },\n\n    // 获取已访问城市数据\n    getVisitedCityData(mapType = 'china') {\n      const visitedData = []\n      \n      // 简化处理，直接返回已访问城市数据\n      if (mapType === 'world') {\n        // 世界地图数据示例\n        return [\n          { name: '中国', value: [116.4, 39.9, 1], visitCount: 1 }\n        ];\n      }\n      \n      // 返回中国地图数据\n      return this.visitedCities;\n    },\n    \n    // 获取城市坐标数据\n    getCityCoordinates(mapType) {\n      // 这里可以根据实际需要返回城市坐标数据\n      // 简化示例，实际项目中可能需要更完整的坐标数据\n      return {\n        '北京': [116.4, 39.9],\n        '上海': [121.4, 31.2],\n        '广州': [113.2, 23.1],\n        '中国': [116.4, 39.9]\n      };\n    },\n    \n    // 获取用户当前位置并添加到足迹\n    getUserLocation() {\n      // 使用getFuzzyLocation获取模糊位置，因为只申请到了模糊地址接口\n      uni.getFuzzyLocation({\n        type: 'wgs84',\n        success: (res) => {\n          // 获取到模糊位置后，提示用户手动输入城市名称\n          uni.showModal({\n            title: '添加足迹',\n            content: '已获取到您的大致位置，请输入您想要添加的城市名称',\n            editable: true,\n            placeholderText: '例如：北京',\n            success: (modalRes) => {\n              if (modalRes.confirm && modalRes.content) {\n                // 用户输入了城市名称\n                const cityName = modalRes.content;\n                this.addVisitedCity(cityName);\n                uni.showToast({\n                  title: `已添加${cityName}到足迹`,\n                  icon: 'success'\n                });\n              }\n            }\n          });\n        },\n        fail: (err) => {\n          console.error('获取位置失败:', err);\n          // 如果获取位置失败，也允许用户手动输入\n          uni.showModal({\n            title: '添加足迹',\n            content: '无法获取您的位置，请手动输入您想要添加的城市名称',\n            editable: true,\n            placeholderText: '例如：北京',\n            success: (modalRes) => {\n              if (modalRes.confirm && modalRes.content) {\n                const cityName = modalRes.content;\n                this.addVisitedCity(cityName);\n                uni.showToast({\n                  title: `已添加${cityName}到足迹`,\n                  icon: 'success'\n                });\n              }\n            }\n          });\n        }\n      });\n    },\n    \n    // 已废弃，改用getFuzzyLocation和手动输入\n    _getUserLocation_old() {\n      // 使用chooseLocation让用户选择位置\n      uni.chooseLocation({\n        success: (res) => {\n          if (res.name && res.address) {\n            // 从选择的位置中提取城市名称\n            // 通常地址格式为：省份市区详细地址\n            const addressParts = res.address.split(/[省市区县]/);\n            let cityName = '';\n            \n            // 尝试从地址中提取城市名称\n            if (addressParts.length > 1) {\n              // 假设第二部分是城市名称\n              cityName = addressParts[1] || res.name;\n            } else {\n              // 如果无法解析，直接使用位置名称\n              cityName = res.name;\n            }\n            \n            // 添加到足迹\n            this.addVisitedCity(cityName);\n            uni.showToast({\n              title: `已添加${cityName}到足迹`,\n              icon: 'success'\n            });\n          } else {\n            uni.showToast({\n              title: '无法获取位置信息',\n              icon: 'none'\n            });\n          }\n        },\n        fail: (err) => {\n          console.error('选择位置失败:', err);\n          uni.showToast({\n            title: '选择位置失败',\n            icon: 'none'\n          });\n        }\n      });\n    },\n    \n    // 不再需要单独的getLocationCity方法，直接在getUserLocation中处理\n    \n    // 添加已访问城市\n    addVisitedCity(cityName) {\n      if (!cityName) return;\n      \n      // 去掉可能存在的\"市\"字\n      const cleanCityName = cityName.replace('市', '');\n      \n      // 检查是否已经存在该城市\n      if (this.footprintData.cities[cleanCityName]) {\n        // 已存在，增加访问次数\n        this.footprintData.cities[cleanCityName].visitCount++;\n      } else {\n        // 新城市，添加记录\n        this.footprintData.cities[cleanCityName] = {\n          visitCount: 1,\n          firstVisit: new Date().toISOString().split('T')[0]\n        };\n        \n        // 添加到访问城市列表\n        this.visitedCities.push({\n          name: cleanCityName,\n          value: 1\n        });\n      }\n      \n      // 保存数据并刷新地图\n      this.saveFootprintData();\n      this.refreshMaps();\n    },\n    \n    // 保存足迹数据\n    saveFootprintData() {\n      try {\n        // 将数据保存到本地存储\n        uni.setStorageSync('footprint_data', JSON.stringify(this.footprintData));\n      } catch (e) {\n        console.error('保存足迹数据失败:', e);\n      }\n    },\n    \n    // 刷新地图\n    refreshMaps() {\n      if (this.chinaMap) {\n        this.chinaMap.setOption({\n          series: [{\n            data: this.visitedCities\n          }, {\n            data: this.visitedCities\n          }]\n        });\n      }\n      \n      if (this.worldMap) {\n        this.worldMap.setOption({\n          series: [{\n            data: this.getVisitedCityData('world')\n          }]\n        });\n      }\n    },\n    \n    // 更新访问城市列表\n    updateVisitedCities() {\n      this.visitedCities = [];\n      \n      // 从足迹数据中更新访问城市列表\n      for (const cityName in this.footprintData.cities) {\n        const cityData = this.footprintData.cities[cityName];\n        this.visitedCities.push({\n          name: cityName,\n          value: cityData.visitCount\n        });\n      }\n      \n      // 更新统计信息\n      this.updateStats();\n    },\n    \n    // 更新统计信息\n    updateStats() {\n      // 计算已访问城市数量\n      const visitedCount = Object.keys(this.footprintData.cities).length;\n      \n      // 假设中国有34个省级行政区（包括特别行政区和台湾）\n      const totalChinaRegions = 34;\n      \n      // 假设世界有195个国家\n      const totalWorldCountries = 195;\n      \n      // 计算覆盖率\n      const chinaRate = ((visitedCount / totalChinaRegions) * 100).toFixed(1);\n      const worldRate = ((1 / totalWorldCountries) * 100).toFixed(1); // 假设只访问了中国\n      \n      // 更新统计信息\n      this.stats = {\n        totalCities: visitedCount,\n        visitedCount: visitedCount,\n        chinaRate: chinaRate + '%',\n        worldRate: worldRate + '%'\n      };\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.footprint-container {\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.map-switch {\n  display: flex;\n  justify-content: center;\n  padding: 12px 0;\n  background: #fff;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  z-index: 10;\n  \n  .switch-btn {\n    flex: 1;\n    max-width: 120px;\n    margin: 0 10px;\n    padding: 8px 0;\n    font-size: 14px;\n    border-radius: 20px;\n    background: #f5f5f5;\n    border: none;\n    \n    &.active {\n      background: #007AFF;\n      color: #fff;\n    }\n  }\n}\n\n.stats-panel {\n  display: flex;\n  justify-content: space-around;\n  padding: 15px;\n  background: #fff;\n  border-bottom: 1px solid #eee;\n  \n  .stats-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n    .stats-label {\n      font-size: 12px;\n      color: #666;\n      margin-bottom: 5px;\n    }\n    \n    .stats-value {\n      font-size: 18px;\n      font-weight: bold;\n      color: #333;\n    }\n  }\n}\n\n.map-container {\n  flex: 1;\n  width: 100%;\n  position: relative;\n  \n  .map-canvas {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n}\n\n.add-location-btn {\n  position: fixed;\n  right: 20px;\n  bottom: 30px;\n  display: flex;\n  align-items: center;\n  padding: 10px 15px;\n  background: #007AFF;\n  color: #fff;\n  border-radius: 30px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n  z-index: 100;\n  \n  text {\n    margin-left: 5px;\n    font-size: 14px;\n  }\n}\n</style>\n","import mod from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--8-oneOf-1-2!../../../../HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-3!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/sass-loader/dist/cjs.js??ref--8-oneOf-1-4!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--8-oneOf-1-5!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./footprint.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../../../HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../HBuilderX/plugins/uniapp-cli/node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/stylePostLoader.js!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--8-oneOf-1-2!../../../../HBuilderX/plugins/uniapp-cli/node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-3!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/sass-loader/dist/cjs.js??ref--8-oneOf-1-4!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader/index.js??ref--8-oneOf-1-5!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/index.js??vue-loader-options!../../../../HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/webpack-uni-mp-loader/lib/style.js!./footprint.vue?vue&type=style&index=0&lang=scss&\"","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1741502130524\n      var cssReload = require(\"I:/HBuilderX/plugins/uniapp-cli/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"hmr\":true,\"publicPath\":\"/\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  "],"sourceRoot":""}